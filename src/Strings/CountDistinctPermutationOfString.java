package Strings;

// We are given a string having only lowercase alphabets. The task is to find out total number of distinct permutation
// can be generated by that string.
//
//Examples:
//Input : ybghjhbuytb
//Output : 1663200

//Idea is to find all the characters that is getting repeated, i.e., frequency of all the character. Then,
// we divide the factorial of the length of string by multiplication of factorial of frequency of characters.

public class CountDistinctPermutationOfString {

    static int factorial(int num) {
        int fact = 1;
        for (int i = 2; i<=num; i++) {
            fact *= i;
        }
        return fact;
    }
    static int findPermutation(String str) {
        int[] count_arr = new int[26];

        for (int i =0; i<str.length(); i++) {
            count_arr[str.charAt(i) - 'a']++;
        }

        int fact = 1;
        for (int i=0; i< 26; i++) {
            fact = fact* factorial(count_arr[i]);
        }
        return factorial(str.length())/fact;
    }
    public static void main(String[] args) {
        String str = "ybghjhbuytb";
        System.out.println("Number of permutations are: " + findPermutation(str));
    }
}
